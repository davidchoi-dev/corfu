{"version":3,"file":"main.78e20fe59cf94c9e3341.bundle.js","sources":["webpack:///./src/Button/button.tsx"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\ninterface IProps {\n  /**\n   * Text of the button.\n   **/\n  content: string;\n  /**\n   * Preferred HTML Element to render the button\n   * @default button\n   *\n   **/\n  element?: \"a\" | \"div\" | \"button\";\n  /**\n   * Edge Style of the button\n   * @default sharp\n   *\n   **/\n  edges?: \"sharp\" | \"rounded\" | \"round-sharp\";\n  /**\n   * Background Color\n   * @default primary\n   *\n   **/\n  primaryColor?: \"primary\" | \"success\" | \"error\" | \"alert\" | \"dark\";\n  /**\n   * Transparent Background and colored border and content\n   * @default false\n   *\n   **/\n  inverted?: boolean;\n  /**\n   * href attribute for the button link\n   *\n   *\n   **/\n  href?: string;\n  /**\n   * Class Name for Styled Components\n   */\n  className?: string;\n  /**\n   * Width\n   * @default 180px\n   */\n  width?: string;\n  /**\n   * Function that will be called when the X button is clicked\n   * @default null\n   */\n  onClick?: (...args: any[]) => any;\n}\n\nconst Container = styled<any>(\"div\")`\n  padding: 15px 25px;\n  font-size: 14px;\n  background: none;\n  border: none;\n  font-family: \"Nunito Sans\", sans-serif;\n  width: ${props => props.width};\n  color: ${props => {\n    if (props.inverted) {\n      if (props.primaryColor === \"primary\") {\n        return \"#2D4EF5\";\n      } else if (props.primaryColor === \"success\") {\n        return \"#4CE2A7\";\n      } else if (props.primaryColor === \"error\") {\n        return \"#E24C4C\";\n      } else if (props.primaryColor === \"alert\") {\n        return \"#F1A153\";\n      } else if (props.primaryColor === \"dark\") {\n        return \"#022047\";\n      }\n    } else {\n      return \"white\";\n    }\n  }};\n  font-weight: 700;\n  font-family: \"Nunito Sans\", sans-serif;\n  &:active,\n  &:focus {\n    outline: none;\n  }\n  box-sizing: border-box;\n  border: ${props => {\n    if (props.primaryColor === \"primary\") {\n      return \"2px solid #2D4EF5\";\n    } else if (props.primaryColor === \"success\") {\n      return \"2px solid #4CE2A7\";\n    } else if (props.primaryColor === \"error\") {\n      return \"2px solid #E24C4C\";\n    } else if (props.primaryColor === \"alert\") {\n      return \"2px solid #F1A153\";\n    } else if (props.primaryColor === \"dark\") {\n      return \"2px solid #022047\";\n    }\n  }};\n  background-color: ${props => {\n    if (props.inverted) {\n      return \"transparent\";\n    } else {\n      if (props.primaryColor === \"primary\") {\n        return \"#2D4EF5\";\n      } else if (props.primaryColor === \"success\") {\n        return \"#4CE2A7\";\n      } else if (props.primaryColor === \"error\") {\n        return \"#E24C4C\";\n      } else if (props.primaryColor === \"alert\") {\n        return \"#F1A153\";\n      } else if (props.primaryColor === \"dark\") {\n        return \"#022047\";\n      }\n    }\n  }};\n  border-radius: ${props => {\n    if (props.edges === \"sharp\") {\n      return \"0px\";\n    } else if (props.edges === \"rounded\") {\n      return \"25px\";\n    } else if (props.edges === \"round-sharp\") {\n      return \"3px\";\n    }\n  }};\n  transition: all 0.2s ease-in-out;\n  &:hover {\n    opacity: 0.9;\n  }\n  &:active {\n    opacity: 1;\n  }\n  cursor: pointer;\n  box-shadow: 0px 10px 25px\n    ${props => {\n      if (props.inverted) {\n        return \"none\";\n      } else {\n        if (props.primaryColor === \"primary\") {\n          return \"rgba(45, 78, 245, 0.5)\";\n        } else if (props.primaryColor === \"success\") {\n          return \"rgba(76, 226, 167, 0.5)\";\n        } else if (props.primaryColor === \"error\") {\n          return \"rgba(226, 76, 76, 0.5)\";\n        } else if (props.primaryColor === \"alert\") {\n          return \"rgba(241, 161, 83, 0.5)\";\n        } else if (props.primaryColor === \"dark\") {\n          return \"rgba(2, 32, 71, 0.5)\";\n        }\n      }\n    }};\n`;\n\nexport const Button = ({\n  content,\n  element = \"button\",\n  edges = \"sharp\",\n  primaryColor = \"primary\",\n  inverted = false,\n  href,\n  className,\n  width = \"180px\",\n  onClick\n}: IProps) => {\n  return (\n    <Container\n      as={element}\n      edges={edges}\n      primaryColor={primaryColor}\n      inverted={inverted}\n      href={href}\n      className={className}\n      width={width}\n      onClick={onClick}\n    >\n      {content}\n    </Container>\n  );\n};\n\nButton.propTypes = {\n  content: PropTypes.string.isRequired,\n  element: PropTypes.oneOf([\"a\", \"div\", \"button\"]),\n  edges: PropTypes.oneOf([\"sharp\", \"rounded\", \"round-sharp\"]),\n  primaryColor: PropTypes.oneOf([\n    \"primary\",\n    \"success\",\n    \"error\",\n    \"alert\",\n    \"dark\"\n  ]),\n  inverted: PropTypes.bool,\n  href: PropTypes.string,\n  className: PropTypes.string,\n  width: PropTypes.string,\n  onClick: PropTypes.func\n};\ntry {\n    // @ts-ignore\n    Button.displayName = \"Button\";\n    // @ts-ignore\n    Button.__docgenInfo = { \"description\": \"\", \"displayName\": \"Button\", \"props\": { \"content\": { \"defaultValue\": null, \"description\": \"Text of the button.\", \"name\": \"content\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"element\": { \"defaultValue\": { value: \"button\" }, \"description\": \"Preferred HTML Element to render the button\", \"name\": \"element\", \"required\": false, \"type\": { \"name\": \"\\\"a\\\" | \\\"div\\\" | \\\"button\\\"\" } }, \"edges\": { \"defaultValue\": { value: \"sharp\" }, \"description\": \"Edge Style of the button\", \"name\": \"edges\", \"required\": false, \"type\": { \"name\": \"\\\"sharp\\\" | \\\"rounded\\\" | \\\"round-sharp\\\"\" } }, \"primaryColor\": { \"defaultValue\": { value: \"primary\" }, \"description\": \"Background Color\", \"name\": \"primaryColor\", \"required\": false, \"type\": { \"name\": \"\\\"primary\\\" | \\\"success\\\" | \\\"error\\\" | \\\"alert\\\" | \\\"dark\\\"\" } }, \"inverted\": { \"defaultValue\": { value: \"false\" }, \"description\": \"Transparent Background and colored border and content\", \"name\": \"inverted\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"href\": { \"defaultValue\": null, \"description\": \"href attribute for the button link\", \"name\": \"href\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"className\": { \"defaultValue\": null, \"description\": \"Class Name for Styled Components\", \"name\": \"className\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"width\": { \"defaultValue\": { value: \"180px\" }, \"description\": \"Width\", \"name\": \"width\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"onClick\": { \"defaultValue\": { value: \"null\" }, \"description\": \"Function that will be called when the X button is clicked\", \"name\": \"onClick\", \"required\": false, \"type\": { \"name\": \"(...args: any[]) => any\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/Button/button.tsx#Button\"] = { docgenInfo: Button.__docgenInfo, name: \"Button\", path: \"src/Button/button.tsx#Button\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAAA","sourceRoot":""}